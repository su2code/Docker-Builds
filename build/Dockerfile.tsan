FROM ubuntu:20.04

LABEL org.opencontainers.image.source https://github.com/su2code/Docker-Builds

ENV LANG C.UTF-8
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime
RUN DEBIAN_FRONTEND=noninteractive apt update && apt install -y \
    apt-utils \
    python3 \
    pkg-config \
    python3-pip \
    git \
    build-essential \
    cmake \
    python3-numpy \
    python3-scipy \
    python3-mpi4py \
    swig \
    libopenmpi-dev \
    libopenblas-dev \
    openmpi-bin \
    ccache \
    petsc-dev \
    python3-petsc4py \
    python3-rtree \
    curl \
    flex \
 && rm -rf /var/lib/apt/lists/* \
 && update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# Build a gcc suitable for thread sanitizer analysis
RUN cd / \
 && git clone git://gcc.gnu.org/git/gcc.git gcc_sources \
 && cd gcc_sources \
 && git checkout releases/gcc-9.4.0 \
 && ./contrib/download_prerequisites \
 && cd / \
 && mkdir gcc_objdir \
 && cd gcc_objdir \
 && /gcc_sources/configure --prefix=/gcc_install --enable-languages=c,c++ --disable-linux-futex --disable-multilib \
 && make \
 && make install \
 && cd / \
 && rm -rf gcc_sources \
 && rm -rf gcc_objdir \
 && cd /gcc_install \
 && ln -s gcc cc
 
# Ensure that ccache uses the built gcc
RUN export PATH=/gcc_install/bin:$PATH \
 && /usr/sbin/update-ccache-symlinks

# Configure environment for the built gcc, also enable thread sanitizer
ENV LD_LIBRARY_PATH=/gcc_install/lib64:$LD_LIBRARY_PATH
ENV CXXFLAGS="-I/gcc_install/include/c++/9.4.0 -I/gcc_install/include/c++/9.4.0/x86_64-pc-linux-gnu -fsanitize=thread"
ENV CFLAGS="-I/gcc_install/include/c++/9.4.0 -I/gcc_install/include/c++/9.4.0/x86_64-pc-linux-gnu -fsanitize=thread"
ENV LDFLAGS="-L/gcc_install/lib64 -fsanitize=thread"
ENV PATH=/usr/lib/ccache:/gcc_install/bin:$PATH
ENV TSAN_OPTIONS="history_size=7 halt_on_error=1"

# Copies your code file from your action repository to the filesystem path `/` of the container
COPY compileSU2.sh /compileSU2.sh

# Code file to execute when the docker container starts up (`entrypoint.sh`)
ENTRYPOINT ["/compileSU2.sh"]
